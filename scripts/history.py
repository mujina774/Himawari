_HiStOrY_V2_
exit()
x\040+\040x\040-1
x\040=\0401
x\040+\040x\040-1
exit()
from\040sympy\040import\040init_printing,\040symbols
init_printing(use_latex='mathjax')
x\040=\040symbols('x')
x\040+\040x\040+\0401
x,\040y\040=\040symbols('x\040y')
f\040=\040x**2\040-\040y**2
f
f.subs([x,\0401],\040[y,\0402])
f.subs([(x,\0401),\040(y,\0402)])
a\040=\040symbols('a')
f.subs([(x,\040a),\040(y,\0402)])
exit()
from\040sympy\040import\040factor,\040expand
f_factor\040=\040factor(f)
f\040=\040x**2\040-\040y**2
x,\040y\040=\040symbol('x\040y')
from\040sympy\040import\040init_printing,\040symbol
from\040sympy\040import\040init_printing,\040symbols
x,\040y\040=\040symbols('x\040y')
f\040=\040x**2\040-\040y**2
f_factor\040=\040factor(f)
f_factor
expand(f_factor
)
from\040sympy\040import\040solveset
solveset(\040x\040+\04010\040-8)
b,\040c\040=\040symbols('b\040c')
solveset(a*x**2\040+\040b*x\040+\040c,\040x)
a\040=\040symbols('a')
solveset(a*x**2\040+\040b*x\040+\040c,\040x)
init_printing(use_latex='mathjax')
solveset(a*x**2\040+\040b*x\040+\040c,\040x)
from\040sympy\040import\040linsolve
eq1\040=\040x\040+\040y\040-\0406
eq2\040=\040x\040-2*y\040+19
linsolve([eq1,\040eq2],\040(x,\040y))
eq1\040=\040x\040+\040y\040-5
linsolve([eq1,\040eq2],\040(x,\040y))
def\040f(x):
\040\040\040\040return\040x**2
f(2)
from\040simpy\040import\040init_printing,\040symbols
from\040sympy\040import\040init_printing,\040symbols
init_printing(use_latex='mathjax')
z\040=\040symbols('x')
f\040=\040x**2
f
f.subs(x,\0402)
from\040sympy.plotting\040import\040plot
plot(f,\040(x,\040-2,\0402),\040legemd\040=True)
%matplotlib\040inline
plot(x+1,\040(x,\040-2,\0402),\040legemd\040=True)
plot(x*3\040+\0402*x**2\040-\04019*x,\040(x,\040-6,\0405),\040legemd\040=True)
plot(x**3\040+\0402*x**2\040-\04019*x,\040(x,\040-6,\0405),\040legemd\040=True)
from\040sympy\040import\040sin,\040cos,\040tan,\040pi
from\040sympy.plotting\040import\040plot_parametric
import\040matplotlib\040as\040plt
plt.rcParams['figure.figsize']=5,\0405
t\040=\040symbols('t')
plot_parametric(cos(t),\040sin(t),\040(t,\0400,\0402*pi),\040legend\040=\040True)
plt.rcParams['figure.figsize']=6,\0404
p\040=\040plot(sin(x),\040cos(x),\040(x,\040-2*pi,\0402*pi),\040legend=True,\040show=False)
p[0].line_color=\040'b'
p[1].line_color\040=\040'r'
p.show()
p=plot(tan(x),\040(x,\0400,\0402*pi),\040legend=True,\040show=False)
p.ylim=(-10,\04010)
p.show
p\040=\040plot(sin(x),\040cos(x),\040(x,\040-2*pi,\0402*pi),\040legend=True)
p=plot(tan(x),\040(x,\0400,\0402*pi),\040legend=True)
p.ylim\040=\040(-10,\04010)
p=plot(tan(x),\040(x,\0400,\0402*pi),\040legend=True)
p=plot(tan(x),\040(x,\0400,\0402*pi),\040legend=True,\040show=False)
p.ylim\040=\040(-10,\04010)
p.show
p=plot(tan(x),\040(x,\0400,\0402*pi),\040legend=True,\040show=False)
p.ylim(-10,\04010)
exit()
import\040matplotlib.pyplot\040as\040plt
from\040sympy\040import\040symbols
p\040=\040plot(2**x,\0401/2**x,\040(x,\040-2,\0402),\040legend=True,\040show\040=\040False)
from\040sympy.plotting\040import\040plot_parametric
p\040=\040plot(2**x,\0401/2**x,\040(x,\040-2,\0402),\040legend=True,\040show\040=\040False)
from\040sympy.plotting\040import\040plot
p\040=\040plot(2**x,\0401/2**x,\040(x,\040-2,\0402),\040legend=True,\040show\040=\040False)
x\040=\040symbol('x')
x\040=\040symbols('x')
p\040=\040plot(2**x,\0401/2**x,\040(x,\040-2,\0402),\040legend=True,\040show\040=\040False)
p[0].line_color\040=\040'b'
p[1].line_color\040=\040'r'
p.show()
exit()
import\040matplotlib.pyplot\040as\040plt
from\040sympy\040import\040symbols
from\040sympy.plotting\040import\040plot_parametric
from\040sympy.plotting\040import\040plot
x\040=\040symbols('x')
from\040sympy\040import\040log
log(4,2)
log(8,2)
p\040=\040plot(log(x,\0402),\040log(2*x,\0402),\040(x,\0400.1,\040100),\040legend\040=\040True,\040show\040=\040False)
p[0].line_color\040=\040'b'
p[1].line_color\040=\040'r'
p.show()
p\040=\040plot(x**2,\040log(2*x,\0402),\040x,\040(x,\040-2,\0404),\040legend\040=\040True,\040show\040=\040False)
p.ylim\040=\040(-2,\0404)
p[0].line_color\040=\040'b'
p[1].line_color\040=\040'r'
p[2].line_color\040=\040'g'
p.show()
p\040=\040plot(2**x,\040log(2*x,\0402),\040x,\040(x,\040-2,\0404),\040legend\040=\040True,\040show\040=\040False)
p.show()
p.ylim\040=\040(-2,\0404)
p.show()
p\040=\040plot(2**x,\040log(x,\0402),\040x,\040(x,\040-2,\0404),\040legend\040=\040True,\040show\040=\040False)
p.ylim\040=\040(-2,\0404)
p.show()
init_printing(use_latex='mathjax')
from\040sympy\040import\040init_printing
init_printing(use_latex='mathjax')
x\040=\040symbols('x')
plot(1/x,\040(x,\040-1,\0401),\040ylim=(-100,\040100))
from\040sympy\040import\040limit
limit(x+1,\040x,\0401)
plot(x\040+\0401,\040(x,\0400,\0402))
limit(1/x,\040x\0400)
limit(1/x,\040x,\0400)
limit(1/x,\040x,\0400,\040dir\040=\040'-')
numer\040=\040x**2\040-\0405*x\040+\0406
denom\040=\040x\040-\0402
f\040=\040numer\040/\040denom
f
from\040sympy\040import\040factor
factor(numer)
factor(numer)\040/\040denom
from\040sympy\040import\040symplify
from\040sympy\040import\040simplify
symplify(f)
simplify(f)
from\040sympy\040import\040sin,\040pi
limit(sin(x),\040/\040x,\040x,\0400)
limit(sin(x)\040/\040x,\040x,\0400)
x_range\040=\040[-pi,\040pi]
p\040=\040plot(sin(x),\040x,\040(x,\040x_range[0],\040x_range[1]),\040show\040=\040False,\040legend\040=\040True)
p[0].line_color\040=\040'b'
p[1].line_color\040=\040'r'
p.show()
x_range\040=\040[-0.1,\0400.1]
p\040=\040plot(sin(x),\040x,\040(x,\040x_range[0],\040x_range[1]),\040show\040=\040False,\040legend\040=\040True)
p.show()
x_range\040=\040[-0.5,\0400.5]
p.show()
p\040=\040plot(sin(x),\040x,\040(x,\040x_range[0],\040x_range[1]),\040show\040=\040False,\040legend\040=\040True)
p.show()
plot(sin(x)\040/\040x,\040(x,\040-4*pi,\0404*pi))
from\040sympy\040import\040oo
n\040=\040symbols('n',\040real\040=\040True,\040positive\040=\040True)
e_0\040=\040limit((1\040+\0401/n)**n,\040n,\040oo)
e_0
e_0.eval(6)
e_0.evalf(6)
e_0.evalf(32)
p\040=\040plot((1\040+\0401/n)**(n),\040e_0,\040(n,\0400.1,\040100),\040show\040=\040False,\040legend\040=\040True)
p[0].line_color\040=\040'b'
p[1].line_color\040=\040'r'
p.show()
from\040sympy\040import\040Sum
k,\040n\040=\040symbols('k\040n')
sum_pi\040=\040Sum(1/k**2,\040(k,\0401,\040n))
sum_pi
s_val\040=\040limit(sum_pi.doit(),\040n,\040oo)
s_val
from\040sympy\040import\040sqrt
sqrt(6\040*\040s_val)
from\040sympy\040import\040lambdify
f\040=\040lambdify(n,\040sqrt(6*sum_pi))
f(10)
f(1000)
import\040numpy\040as\040np
n_array\040=\040np.logspace(1,\0406,\04020,dtype='int')
sum_array\040=\040[f(n_array[i])\040for\040i\040in\040range(len(n_arraY))]
sum_array\040=\040[f(n_array[i])\040for\040i\040in\040range(len(n_array))]
fig\040=\040plt.figure(figsize\040=\040(8,\0408))
ax\040=\040fig.add_subplot(111)
ax.plot(n_array,\040sum_array,\040marker\040=\040'o')
ax.plot(n_array,\040np.pi*np.ones(20))
ax.set_xscale('log')
ax.set_xlabel('n')
ax.set_ylabel('s')
plt.show()
exit()
import\040numpy\040as\040np
import\040matplotlib.pyplot\040as\040plt
data_jp_population\040=\040np.loadtxt('data/jp_population.csv',\040delimiter=',')
year\040=\040data_jp_population[:,0]
jp_pop\040=\040data_jp_population[:,1]
jp_pop\040=\040data_jp_population[:,1]/1000
fig\040=\040plt.figure(figsize\040=\040(8,8))
ax\040=\040fig.add_subplot(111)
ax.plot(year,\040jp_pop,\040marker\040=\040'o')
ax.set_title('Population\040in\040Japan')
ax.set_xlabel('Year')
ax.set_ylabel('Population\040in\040Million')
ax.grid()
plt.show()
jp_pop[21]-jp_pop[20]
diff_jp_pop\040=\040np.diff(jp_pop,\040n\040=\0401)
print('Population:\040{0}'.format(diff_jp_pop[-3:]))
diff_year\040=\040np.diff(year,\040n\040=\0401)
print('year:\040{0}'.format(diff_year[:5]))
ave_diff_rate_jp_pop\040=\040diff_jp_pop\040/\040diff_year
print('Population\040rate:\040{0}'.format(ave_diff_rate_jp_pop[:5]))
fig\040=\040plt.figure(figsize=(8,8))
ax=\040fig.add_subplot(111)
ax.plot(year[1:],\040ave_diff_rate_jp_pop,\040marker\040=\040'o')
ax.set_xlabel('Year')
ax.set_ylabel('Differential\040population\040in\040million\040per\040year')
ax.grid()
plt.show()
from\040sympy\040import\040symbols,\040init_printing
init_printing(use_latex='mathjax')
x\040=\040symbols('x')
(f.subs(x,\0402)\040-\040f.subs(x,\0401))\040/\040(2\040-\0401)
(f.subs(x,\0402)\040-\040f.subs(x,\0401))\040/\040(2\040-\0401)f\040=\040x**2
f\040=\040x**2
(f.subs(x,\0402)\040-\040f.subs(x,\0401))\040/\040(2\040-\0401)
def\040ave_rate(f,\040a,\040b):
\040\040\040\040return\040(f.subs(x,\040b)\040-\040f.subs(x,\040a))/(b\040-\040a)
ave_rate(f,\0401,\0402)
ave_rate(f,\0401,\0402)*(x-2)\040+\040f.subs(x,\0402)
f.subs(x,\0402)
def\040line_bw_2pts(f,\040a,\040b):
\040\040\040\040return\040ave_rate(f,\040a,\040b)\040*\040(x\040-\040a)\040+\040f.subs(x,\040a)
line_bw_2pts(f,\0401,\0402)
line_bw_2pts(f,\0403,\0408)
from\040sympy.plotting\040import\040plot
from\040matplotlib\040import\040rcdefaults
import\040matplotlib.pyplot\040as\040plt
p\040=\040plot(f,\040line_bw_2pts(f,\0401,\0402),\040show\040=\040False,\040legend\040=\040True)
p.xlim\040=\040[0,\0402.5]
p.ylim\040=\040[-4,\0408]
p[0].lime_color\040=\040'g'
p[1].lime_color\040=\040'c'
p[0].label\040=\040'$x^2$'
p[1].label\040=\040'$a\040=\0401,\040b\040=\0402$'
rcdefaults
plt.rcParams['figure.figsize']\040=\0406,\0406
plt.rcParams['legend.loc']\040=\040'upper\040left'
plt.rcParams['axes.grid']\040=\040True
p.show()
import\040logging
logger\040=\040logging.getLogger(__name__)
filehandler\040=\040logging.StreamHandler()
logger.addHandler(filehandler)
logger.addHandler(streamhandler)
logger.setLevel(logging.DEBUG)
logger.debug('testlog_debug')
filehandler\040=\040logging.FileHandler('test.log')
p.show()
p\040=\040plot((f,\040(x,\0400,\0404)),\040(line_bw_2pts(f,\0401,\0401.1).\040(x,\0400,\0404)),
p\040=\040plot((f,\040(x,\0400,\0404)),\040
(line_bw_2pts(f,\0401,\0401.1),\040(x,\0400,\0404)),
(line_bw_2pts(f,\0401,\0402),\040(x,\0400,\0404),
(line_bw_2pts(f,\0401,\0403),\040(x,\0400,\0404)),
show\040=\040False,\040legend\040=\040True)
\040exit()
exit()
from\040sympy\040import\040Function
x\040=\040symbols('x',\040real\040=\040True)
from\040sympy\040import\040symbols,\040init_printing
x\040=\040symbols('x',\040real\040=\040True)
f\040=\040Function('f')
g\040=\040Function('g')
diff(f(x)\040*\040g(x),\040x)
from\040sympy\040import\040diff
diff(f(x)\040*\040g(x),\040x)
import\040matplotlib.pyplot\040as\040plt
%matplotlib\040inline
init_printing(use_latex='mathjax')
diff(f(x)\040*\040g(x),\040x)
diff(f,\040x,\0402)
diff(f(x)\040/\040g(x))
exit()
import\040numpy\040as\040np
A\040=\040np.array([[3,\0404],[-1,\040-3],\040[1,\0402]])
B\040=\040np.array([[-3,\0405],[2,\0406],\040[0,\040-2]])
print(-3*A\040+\0405*B)
A\040=\040np.array([[-1\040+\0403j,\0402\040+\0403j,\0404\040+j],[-4\040-\0403j,\0401\040+\040j,\0403\040-\0402j]])
import\040numpy\040as\040np
Z1\040=\0401\040+2j
A\040=\040np.array([[-1\040+\0403j,\0402\040+\0403j,\0404\040+j],[-4\040-\0403j,\0401\040+\0401j,\0403\040-\0402j]])
exit()
A\040=\040np.array([[2\040+\0403j,\040-1\040+\0402j,\0402\040+\0401j],\040[-3\040-\0401j,\0403\040+\0404j,\0402\040-\0401j]])
import\040numpy\040as\040np
A\040=\040np.array([[2\040+\0403j,\040-1\040+\0402j,\0402\040+\0401j],\040[-3\040-\0401j,\0403\040+\0404j,\0402\040-\0401j]])
B\040=\040np.array([[2\040+\0402j,\040j],\040[1\040-j,\0401\040+\040j],\040[3\040-\040j,\0405\040+2j]])
import\040numpy\040as\040np
B\040=\040np.array([[2\040+\0402j,\040j],\040[1\040-j,\0401\040+\040j],\040[3\040-\040j,\0405\040+2j]])
A\040=\040np.array([[2\040+\0403j,\040-1\040+\0402j,\0402\040+\0401j],\040[-3\040-\0401j,\0403\040+\0404j,\0402\040-\0401j]])
A\040=\040np.array([[2\040+\0402j,\040]j,\040[1\040-\040j,\0401\040+\040j],\040[3\040-\040j,\0405\040+\0402j]])
A\040=\040np.array([[2\040+\0402j,\040j],\040[1\040-\040j,\0401\040+\040j],\040[3\040-\040j,\0405\040+\0402j]])
B\040=\040np.array([[2\040+\0402j,\040j],\040[1\040-j,\0401\040+\040j],\040[3\040-\040j,\0405\040+2j]])
A\040=\040np.array([[2\040+\0403j,\040-1\040+\0402j,\0402\040+\0401j],\040[-3\040-\0401j,\0403\040+\0404j,\0402\040-\0401j]])
B\040=\040np.array([[2\040+\0402j,\0401j],\040[1\040-\0401j,\0401\040+\0401j],\040[3\040-\0401j,\0405\040+2j]])
print(A@B)
print(B@A)
exit()
import\040numpy\040as\040np
I\040=\040np.eye(4)
I
exit()
print('Hello\040World!')
exit()
import\040mlx.core\040as\040mx
pip\040install\040mlx
exit()
import\040mlx.core\040as\040mx
exit()
import\040mlx.core\040as\040mx
exit
exit()
import\040mlx.core\040as\040mx
a\040=\040mx.array([1,\0402,\0403,\0404])
a.shape
a.dtype
b\040=\040mx.array([1.0,\0402.0,\0403.0,\0404.0])
b.dtype
c\040=\040a+\040b
c
import\040numpy\040as\040np
exit()
import\040numpy\040as\040np
import\040matplotlib.pyplot\040as\040plt
a\040=\040np.array(plt.imread(./im/2021/202106.png))
a\040=\040np.array(plt.imread('./im/2021/202106.png'))
a\040=\040np.array(plt.imread('./im/2021/wv202106.png'))
a.shape()
np.shape(a)
b\040=\040np.array(plt.imread('./im/2021/wv202106rgba.png'))
np.shape(b)
exit()
import\040wget
file\040=\040'ftp://hmwr829gr.cr.chiba-
u.ac.jp/gridded/FD/V20190123/202007/TIR/202007070300.tir.
file\040=\040'ftp://hmwr829gr.cr.chiba-u.ac.jp/gridded/FD/V20190123/202007/TIR/202007070300.tir.01.fld.geoss.bz2'
wget.download(file)
zipfile\040=\040bz2.BZ2File(file)
import\040bz2
zipfile\040=\040bz2.BZ2File(file)
print(file)
zipfile\040=\040bz2.BZ2File(202007070300.tir.01.fld.geoss.bz2)
zipfile\040=\040bz2.BZ2File('202007070300.tir.01.fld.geoss.bz2')
data\040=\040zipfile.read()
fn\040=\040'202007070300.tir.01.fld.geoss'
open(fn,\040"wb").write(data)
os.remove(fnamebz)'202007070300.tir.01.fld.geoss.bz2'
os.remove(fnamebz)'202007070300.tir.01.fld.geoss.bz2')
os.remove('202007070300.tir.01.fld.geoss.bz2')
import\040os
os.remove('202007070300.tir.01.fld.geoss.bz2')
import\040numpy\040as\040np
import\040matplotlib.pyplot\040as\040plt
import\040matplotlib.cm\040as\040cm
dataDN\040=\040np.fromfile(fn,dtype='>u2')
dataDN
dataDN.shape
dataDN\040=\040dataDN.reshape(6000,6000)
plt.imshow(dataDN)
%matplotlib\040inline
plt.show()
import\040readline
readline.write_history_file('history.py')
